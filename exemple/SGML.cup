import java_cup.runtime.*;
import java.util.Vector;
import java.util.HashMap;
import java.io.*;

// Initializing HashMap and boolean for allowing output
parser code {:
	HashMap<String, Double> val = new HashMap<>();
	boolean output = true;
:}

terminal OPENTAG, CLOSURE, CLOSETAG, CLOSEINLINE, IF, SET;
terminal String IDENTIFICATOR;
terminal String NAME;
terminal Double VALUE;

non terminal file, newtag, inlinetag, closingtag;

// Six rules, two for each syntax, one stops the analyze, the other continues it.
// The three syntaxes are <A />, <A></A> or <A>other stuff</A>
file ::= inlinetag;
file ::= inlinetag file;					// We need to throw exceptions if the closing tag is different than the opening one
file ::= newtag:t1 file closingtag:t2 		{: if(!t2.equals(t1)) throw new Exception("erreur"); :};
file ::= newtag:t1 file closingtag:t2 file 	{: if(!t2.equals(t1)) throw new Exception("erreur"); :};
file ::= newtag:t1 closingtag:t2 			{: if(!t2.equals(t1)) throw new Exception("erreur"); :};
file ::= newtag:t1 closingtag:t2 file 		{: if(!t2.equals(t1)) throw new Exception("erreur"); :};

// Rule for eventual words after an opening tag. It is important to report the previous result
newtag ::= newtag:s NAME:n	{:
								// We print the word if it is needed
								if(output)
									System.out.println(n);
								// RESULT may contain the name of the opening tag for comparaison later, we need to keep it
								RESULT = s;
							:};
// Rule for a basic <A> tag, the name is kept in s. We return it in RESULT for further comparaison.
newtag ::= OPENTAG NAME:s CLOSETAG	{: 	
										if(output)
											System.out.println("<" + s + ">");
										RESULT = new String(s);
									:};
// Rule for a <A foo="-3,1"> tag
newtag ::= OPENTAG NAME:s IDENTIFICATOR:i VALUE:v CLOSETAG	{:
																if(output)
																	System.out.println("<" + s + " " + i + "=\"" + v.toString() + "\">");
																RESULT = new String(s);
															:};
// Rule for a <#if test=="value"> tag
newtag ::= OPENTAG IF IDENTIFICATOR:i VALUE:v CLOSETAG	{:
															// If the value has not been declared...
															if(!val.containsKey(i))
																output = false;
															// Or is not equals to what is stored, we stop printing
															else if(!val.get(i).equals(v))
																output = false;
															// We still need this to check if the closing tag is correct
															RESULT = new String("#if");
														:};

// Rule for adding words after the tag, we print them if needed and report the name of the tag in RESULT
closingtag ::= closingtag:s NAME:n	{:
										if(output)
											System.out.println(n);
										RESULT = s;
									:};
// Rule for a basic closing tag </A>
closingtag ::= CLOSURE NAME:s CLOSETAG	{:
											if(output)
												System.out.println("</" + s + ">");
											RESULT = new String(s);
										:};
// Rule for a </#if> closing tag, we set the output to true
closingtag ::= CLOSURE IF CLOSETAG	{:
										output = true;
										RESULT = new String("#if");
									:};

// Rule for adding words after an inline tag
inlinetag ::= inlinetag NAME:n	{:
									if(output)
										System.out.println(n);
								:};
// Rule for a basic inline tag <A />
inlinetag ::= OPENTAG NAME:s CLOSEINLINE	{: 
												if(output)
													System.out.println("<" + s + " />");
											:};
// Rule for a <A foo="4" /> inline tag
inlinetag ::= OPENTAG NAME:s IDENTIFICATOR:i VALUE:v CLOSEINLINE	{: 
																		if(output)
																			System.out.println("<" + s + " " + i + "=\"" + i.toString() + "\" />");
																	:};
// Rule for a <#set ident="value" /> inline tag. We simply use put from HashMap, it updates or create the key/value pair in the map.
inlinetag ::= OPENTAG SET IDENTIFICATOR:i VALUE:v CLOSEINLINE	{: val.put(i, v); :};

