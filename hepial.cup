import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;
import java.util.*;
import java.lang.*;
import ch.hepia.Compilateur.*;
import ch.hepia.Compilateur.Arbre.*;
import ch.hepia.Compilateur.TDS.*;
import ch.hepia.Compilateur.Types.*;

// Initializing
parser code {:
	SymbolTable TDS;
	public Type lastType;
	public String lastId;
	public PileArbre stack = new PileArbre();
	public Lexer lexer = (Lexer)getScanner();
:}

terminal DEBUTPRG, FINPRG, PROG, POINTVIRGULE, VIRGULE, CONSTANTE, EGAL, PARENTHESEOUVERT, PARENTHESEFERME, DEBUTFONC, FINFONC;
terminal ENTIER, BOOLEEN, CROCHETOUVERT, CROCHETFERME, RANGE, LIRE, ECRIRE, A, VRAI, FAUX, FOIS, DIVISE, PLUS, MOINS;
terminal PLUSGRAND, PLUSPETIT, PLUSGRANDEGAL, PLUSPETITEGAL, ET, OU, EGALITE, DIFFERENCE, NON, TILDE, RETOURNE, SI, ALORS;
terminal SINON, FINSI, TANTQUE, POUR, FAIRE, FINTANTQUE, ALLANTDE, FINPOUR;
terminal int CONSTANTEENT;
terminal String IDENTIFICATOR;
terminal String CONSTANTECHAINE;

non terminal axiome, programme, entete, decla, declavar, declaconst, declafonct;
non terminal typebase, tableau, param, corps, instr, lire, ecrire, affectation, retour;
non terminal condition, tantque, pour, expr, acces, index, operande, opebin, opeun, appelfct, pareff;
non terminal dim;
non terminal ArrayList<String> lident;
non terminal Type type;

precedence left PLUS, MOINS, FOIS ,DIVISE, EGALITE, DIFFERENCE;
precedence left PLUSGRAND, PLUSPETIT, PLUSGRANDEGAL, PLUSPETITEGAL, ET, OU, RANGE;
precedence right TILDE, NON;

axiome ::= programme
{:
	Linstr list = (Linstr)stack.pop();
	Bloc b = (Bloc)stack.pop();
	b.add(list);
	stack.push(b);

	AnalyseurSemantique.getInstance().visiter(stack);
	GestionnaireErreur errorhandler = GestionnaireErreur.getInstance();
	if (!errorhandler.isEmpty()){
		errorhandler.printErrors();
		System.exit(0);
	}else{
		System.out.println("debut de la construction du code");
		JasminGenerateur generateur = new JasminGenerateur("output.j");
		generateur.generate(stack);
		generateur.close();
	}

:}
;

programme ::= entete DEBUTPRG corps FINPRG;

programme ::= entete decla DEBUTPRG corps FINPRG;

entete ::= PROG IDENTIFICATOR
{:
	TDS.getInstance().openBlock();
	stack.push(new Bloc(0));
:}
;

decla ::= declavar
        | declaconst
        | declafonct
        | declavar decla
        | declaconst decla
        | declafonct decla
;

declavar ::= type:type lident:id_list POINTVIRGULE
{:
  for (String id : id_list) {
		TDS.getInstance().add(id, new Symbole(lastType, lexer.getLine()));
		Bloc bloc = (Bloc) stack.pop();
		bloc.add(new Affectation(new Nombre(0, lexer.getLine()), new Idf(id, lexer.getLine()), lexer.getLine()));
		stack.push(bloc);
    	System.out.println("line " + lexer.getLine()+ ":" + id+": "+lastType.toString() + " => " + TDS.getInstance().getCurrentBlock());
	}
:}
;

declaconst ::= CONSTANTE type IDENTIFICATOR:id EGAL expr POINTVIRGULE
{:
	Expression expr = (Expression)stack.pop();
	TDS.getInstance().add(id, new Symbole(lastType, lexer.getLine()));
	Bloc bloc = (Bloc) stack.pop();
	bloc.add(new Affectation(expr, new Idf(id, lexer.getLine()), lexer.getLine()));
	stack.push(bloc);
	System.out.println("line " + lexer.getLine()+ ":" + id+": "+lastType.toString() + " => " + TDS.getInstance().getCurrentBlock());
:}
;

declafonct ::= type IDENTIFICATOR:id PARENTHESEOUVERT PARENTHESEFERME decla DEBUTFONC corps FINFONC
{:
	TDS.getInstance().add(id, new Symbole(lastType, lexer.getLine()));
	System.out.println("line " + lexer.getLine() + " " +id+": "+lastType.toString() + " => " + TDS.getInstance().getCurrentBlock());
:}
             | type IDENTIFICATOR:id PARENTHESEOUVERT param PARENTHESEFERME decla DEBUTFONC corps FINFONC
{:
	TDS.getInstance().add(id, new Symbole(lastType, lexer.getLine()));
  	System.out.println("line " + lexer.getLine() + " " +id+": "+lastType.toString() + " => " + TDS.getInstance().getCurrentBlock());
:}

;

lident ::= IDENTIFICATOR:id
{:
  ArrayList<String> id_list = new ArrayList<String>();
  id_list.add(id);
  RESULT = id_list;
:}
          | lident:id_list VIRGULE IDENTIFICATOR:id
{:
  id_list.add(id);
  RESULT = id_list;
:}
;

type ::= typebase | tableau;

typebase ::= ENTIER
{:
  lastType = TypeEntier.getInstance();
:}
| BOOLEEN
{:
  lastType = TypeBooleen.getInstance();
:}
;

tableau ::= typebase CROCHETOUVERT dim CROCHETFERME
;

dim ::= expr RANGE expr
      | dim VIRGULE expr RANGE expr;

param ::= type IDENTIFICATOR
        | param VIRGULE type IDENTIFICATOR;

//todo finish grammar
corps ::= corps instr
{:
	Instruction instr = (Instruction)stack.pop();
	Linstr list = (Linstr)stack.pop();
	list.add(instr);
	stack.push(list);
:}
        |
{:
	stack.push(new Linstr(0));
:}
;

instr ::= affectation
        | ecrire
        | lire
        | condition
        | retour
        | tantque
        | pour;

lire ::= LIRE IDENTIFICATOR:id POINTVIRGULE
{:
	stack.push(new Lire(new Idf(id, lexer.getLine()), lexer.getLine()));
:}
;

ecrire ::= ECRIRE expr POINTVIRGULE
{:
	Expression expr = (Expression)stack.pop();
	stack.push(new Ecrire(expr, lexer.getLine()));
:}
         | ECRIRE CONSTANTECHAINE:str POINTVIRGULE
{:
	stack.push(new Ecrire(str, lexer.getLine()));
:};

affectation ::= acces EGAL expr POINTVIRGULE
{:
	Expression source = (Expression) (stack.pop());
	Idf dest = (Idf) (stack.pop());
	stack.push(new Affectation(source, dest, lexer.getLine()));
:}
;

retour ::= RETOURNE expr POINTVIRGULE;

condition ::= SI expr ALORS corps SINON corps FINSI
{:
	Linstr sinon = (Linstr) stack.pop();
	Linstr alors = (Linstr) stack.pop();
	Expression cond = (Expression) stack.pop();
	stack.push(new Condition(cond, alors, sinon, lexer.getLine()));
:}
;

tantque ::= TANTQUE expr FAIRE corps FINTANTQUE
{:
	Linstr boucle = (Linstr) stack.pop();
	Expression cond = (Expression) stack.pop();
	stack.push(new Tantque(cond, boucle, lexer.getLine()));
:}
;

pour ::= POUR IDENTIFICATOR ALLANTDE expr A expr FAIRE corps FINPOUR
{:
	Linstr boucle = (Linstr) stack.pop();
	Expression BorneSup = (Expression) stack.pop();
	Expression BorneInf = (Expression) stack.pop();
	Idf ident = (Idf) stack.pop();
	stack.push(new Pour(ident, BorneInf, BorneSup, boucle, lexer.getLine()));
:}
;

expr ::= expr opebin expr
{:
	Expression exprd = (Expression)stack.pop();
	Binaire opebin = (Binaire)stack.pop();
	Expression exprg = (Expression)stack.pop();
	opebin.setOperandeDroite(exprd);
	opebin.setOperandeGauche(exprg);
	stack.push(opebin);
:}
      |  opeun expr
{:
	Expression expr = (Expression)stack.pop();
	Unaire opeun = (Unaire)stack.pop();
	opeun.setOperande(expr);
	stack.push(opeun);
:}
      |  PARENTHESEOUVERT expr PARENTHESEFERME
      |  operande;

acces ::= IDENTIFICATOR:id
{:
	stack.push(new Idf(id, lexer.getLine()));
:}
        | IDENTIFICATOR index;

index ::= CROCHETOUVERT expr CROCHETFERME
        | CROCHETOUVERT expr CROCHETFERME index;

operande ::= acces
          |  appelfct
          |  CONSTANTEENT:constante {: stack.push(new Nombre(constante, lexer.getLine())); :}
          |  VRAI {: stack.push(new Booleen(true, lexer.getLine())); :}
          |  FAUX {: stack.push(new Booleen(false, lexer.getLine())); :};

opebin ::= PLUS {: stack.push(new Addition(lexer.getLine())); :}
        |  MOINS {: stack.push(new Soustraction(lexer.getLine())); :}
        |  DIVISE {: stack.push(new Division(lexer.getLine())); :}
        |  FOIS {: stack.push(new Produit(lexer.getLine())); :}
        |  EGALITE {: stack.push(new Egal(lexer.getLine())); :}
        |  DIFFERENCE {: stack.push(new Different(lexer.getLine())); :}
        |  PLUSPETIT {:	stack.push(new Inferieur(lexer.getLine())); :}
        |  PLUSGRAND {: stack.push(new Superieur(lexer.getLine())); :}
        |  PLUSGRANDEGAL {:	stack.push(new SupEgal(lexer.getLine())); :}
        |  PLUSPETITEGAL {: stack.push(new InfEgal(lexer.getLine())); :}
        |  ET {: stack.push(new Et(lexer.getLine())); :}
        |  OU {: stack.push(new Ou(lexer.getLine())); :}
;

opeun ::= TILDE {: stack.push(new Non(lexer.getLine())); :}
        | NON {: stack.push(new Tilde(lexer.getLine())); :}
        ;

appelfct ::= IDENTIFICATOR PARENTHESEOUVERT PARENTHESEFERME
          |  IDENTIFICATOR PARENTHESEOUVERT pareff PARENTHESEFERME;

pareff ::= expr
        |  pareff VIRGULE expr;
