import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;
import java.util.*;
import java.lang.*;
import Arbre.*;

// Initializing
parser code {:
  SymbolTable TDS;
  public Type lastType;
:}

terminal DEBUTPRG, FINPRG, PROG, POINTVIRGULE, VIRGULE, CONSTANTE, EGAL, PARENTHESEOUVERT, PARENTHESEFERME, DEBUTFONC, FINFONC;
terminal ENTIER, BOOLEEN, CROCHETOUVERT, CROCHETFERME, RANGE, LIRE, ECRIRE, A, VRAI, FAUX, FOIS, DIVISE, PLUS, MOINS;
terminal PLUSGRAND, PLUSPETIT, PLUSGRANDEGAL, PLUSPETITEGAL, ET, OU, EGALITE, DIFFERENCE, NON, TILDE, RETOURNE, SI, ALORS;
terminal SINON, FINSI, TANTQUE, POUR, FAIRE, FINTANTQUE, ALLANTDE, FINPOUR;
terminal Integer CONSTANTEENT;
terminal String IDENTIFICATOR;
terminal String CONSTANTECHAINE;

non terminal axiome, programme, entete, decla, declavar, declaconst, declafonct;
non terminal typebase, tableau, param, corps, instr, lire, ecrire, affectation, retour;
non terminal condition, tantque, pour, expr, acces, index, operande, opebin, opeun, appelfct, pareff;
non terminal int dim;
non terminal ArrayList<String> lident;
non terminal Type type;

precedence left PLUS, MOINS, FOIS ,DIVISE, EGALITE, DIFFERENCE;
precedence left PLUSGRAND, PLUSPETIT, PLUSGRANDEGAL, PLUSPETITEGAL, ET, OU, RANGE;
precedence right TILDE, NON;

axiome ::= programme;

programme ::= entete DEBUTPRG corps FINPRG;

programme ::= entete decla DEBUTPRG corps FINPRG;

entete ::= PROG IDENTIFICATOR
{:
  TDS.getInstance().openBlock();
:}
;

decla ::= declavar
        |declaconst
        |declafonct
        |decla declavar
        |decla declaconst
        |decla declafonct
;

declavar ::= type:type lident:id_list POINTVIRGULE
{:
  for (String id : id_list) {
		TDS.getInstance().add(id, new Symbole(lastType, id_listright));
    System.out.println("line " + id_listright + " " +id+": "+lastType.toString() + " => " + TDS.getInstance().getCurrentBlock());
	}
:}
;

declaconst ::= CONSTANTE type IDENTIFICATOR:id EGAL expr POINTVIRGULE
{:
  TDS.getInstance().add(id, new Symbole(lastType, idright));
  System.out.println("line " + idright + " " +id+": "+lastType.toString() + " => " + TDS.getInstance().getCurrentBlock());
:}
;

declafonct ::= type IDENTIFICATOR PARENTHESEOUVERT PARENTHESEFERME decla DEBUTFONC corps FINFONC
             | type IDENTIFICATOR PARENTHESEOUVERT param PARENTHESEFERME decla DEBUTFONC corps FINFONC;

lident ::= IDENTIFICATOR:id
{:
  ArrayList<String> id_list = new ArrayList<String>();
  id_list.add(id);
  RESULT = id_list;
:}
          | lident:id_list VIRGULE IDENTIFICATOR:id
{:
  id_list.add(id);
  RESULT = id_list;
:}
;

type ::= typebase | tableau;

typebase ::= ENTIER
{:
  lastType = TypeEntier.getInstance();
:}
| BOOLEEN
{:
  lastType = TypeBooleen.getInstance();
:}
;

tableau ::= typebase CROCHETOUVERT dim CROCHETFERME
{:
	
:}
;

dim ::= expr RANGE expr
      | dim VIRGULE expr RANGE expr;

param ::= type IDENTIFICATOR
        | param VIRGULE type IDENTIFICATOR;

//todo finish grammar
corps ::= instr
        | instr corps;

instr ::= affectation
        | ecrire
        | lire
        | condition
        | retour
        | tantque
        | pour;

lire ::= LIRE IDENTIFICATOR POINTVIRGULE;

ecrire ::= ECRIRE expr POINTVIRGULE
         | ECRIRE CONSTANTECHAINE POINTVIRGULE;

affectation ::= acces EGAL expr POINTVIRGULE;

retour ::= RETOURNE expr POINTVIRGULE;

condition ::= SI expr ALORS corps SINON corps FINSI;

tantque ::= TANTQUE expr FAIRE corps FINTANTQUE;

pour ::= POUR IDENTIFICATOR ALLANTDE expr A expr FAIRE corps FINPOUR;

expr ::= expr opebin expr
      |  opeun expr
      |  PARENTHESEOUVERT expr PARENTHESEFERME
      |  operande;

acces ::= IDENTIFICATOR
        | IDENTIFICATOR index;

index ::= CROCHETOUVERT expr CROCHETFERME
        | CROCHETOUVERT expr CROCHETFERME index;

operande ::= acces
          |  appelfct
          |  CONSTANTEENT
          |  VRAI
          |  FAUX;

opebin ::= PLUS
        |  MOINS
        |  DIVISE
        |  FOIS
        |  EGALITE
        |  DIFFERENCE
        |  PLUSPETIT
        |  PLUSGRAND
        |  PLUSGRANDEGAL
        |  PLUSPETITEGAL
        |  ET
        |  OU;

opeun ::= TILDE
        | NON;

appelfct ::= IDENTIFICATOR PARENTHESEOUVERT PARENTHESEFERME
          |  IDENTIFICATOR PARENTHESEOUVERT pareff PARENTHESEFERME;

pareff ::= expr
        |  pareff VIRGULE expr;
