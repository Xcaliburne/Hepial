import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;

// Initializing
parser code {:
:}

terminal DEBUTPRG, FINPRG, PROG, POINTVIRGULE, VIRGULE, CONSTANTE, EGAL, PARENTHESEOUVERT, PARENTHESEFERME, DEBUTFONC, FINFONC;
terminal ENTIER, BOOLEEN, CROCHETOUVERT, CROCHETFERME, RANGE;
terminal Integer CONSTANTEENT;
terminal String IDENTIFICATOR;
terminal String CONSTANTECHAINE;
terminal String COMMENTAIRE;

non terminal axiome, programme, entete, decla, declavar, lident, declaconst, declafonct, type;
non terminal typebase, tableau, dim, param, corps, instr, lire, ecrire, affectation, retour;
non terminal condition, tantque, pour, expr, acces, index, operande, opebin, opeun, appelfct, pareff;

axiome ::= programme;

programme ::= entete DEBUTPRG corps FINPRG;
programme ::= entete decla DEBUTPRG corps FINPRG;

entete ::= PROG IDENTIFICATOR;

decla ::=  declavar | declaconst | declafonct;
decla ::=  decla declavar | decla declaconst | decla declafonct;

declavar ::= type lident POINTVIRGULE;

declaconst ::= CONSTANTE type IDENTIFICATOR EGAL expr POINTVIRGULE;

declafonct ::= type IDENTIFICATOR PARENTHESEOUVERT param PARENTHESEFERME decla DEBUTFONC corps FINFONC;
declafonct ::= type IDENTIFICATOR PARENTHESEOUVERT PARENTHESEFERME decla DEBUTFONC corps FINFONC;

lident ::= IDENTIFICATOR | lident VIRGULE IDENTIFICATOR;

type ::= typebase | tableau;

typebase ::= ENTIER | BOOLEEN;

tableau ::= typebase CROCHETOUVERT dim CROCHETFERME;

dim ::= expr RANGE expr;
dim ::= dim VIRGULE expr RANGE expr;

param ::= type ident;
param ::= param VIRGULE type ident;


file ::= newtag:t1 file closingtag:t2 file 	{: if(!t2.equals(t1)) throw new Exception("erreur"); :};
